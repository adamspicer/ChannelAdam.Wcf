// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ChannelAdam.Wcf.BehaviourSpecs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ConsumingServicesFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ConsumingServices.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Consuming Services", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Consuming Services")))
            {
                ChannelAdam.Wcf.BehaviourSpecs.ConsumingServicesFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 001 - Positive - Should use a factory method to create a new " +
            "service channel")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        public virtual void ConsumingServices_001_Positive_ShouldUseAFactoryMethodToCreateANewServiceChannel()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ConsumingServices - 001 - Positive - Should use a factory method to create a new " +
                    "service channel", new string[] {
                        "UnitTest"});
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
testRunner.Given("a factory method to create a new service channel", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
testRunner.When("the service consumer is created with the factory method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
testRunner.Then("the service consumer used the factory method to create a new service channel", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 002 - Positive - Should automatically create a new service ch" +
            "annel as needed when the previous one has been closed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        public virtual void ConsumingServices_002_Positive_ShouldAutomaticallyCreateANewServiceChannelAsNeededWhenThePreviousOneHasBeenClosed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ConsumingServices - 002 - Positive - Should automatically create a new service ch" +
                    "annel as needed when the previous one has been closed", new string[] {
                        "UnitTest"});
#line 12
this.ScenarioSetup(scenarioInfo);
#line 13
testRunner.Given("a factory method to create a new service channel", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 14
testRunner.When("the service consumer is created with the factory method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 15
testRunner.And("the service channel is closed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
testRunner.And("the service channel is accessed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
testRunner.Then("the service consumer used the factory method to create a new service channel agai" +
                    "n", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 005 - Positive - Should be created successfully from Unity Io" +
            "C")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        public virtual void ConsumingServices_005_Positive_ShouldBeCreatedSuccessfullyFromUnityIoC()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ConsumingServices - 005 - Positive - Should be created successfully from Unity Io" +
                    "C", new string[] {
                        "UnitTest"});
#line 23
this.ScenarioSetup(scenarioInfo);
#line 24
testRunner.Given("a configured Unity IoC container", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 25
testRunner.When("the service consumer is created with the Unity IoC container", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 26
testRunner.Then("the service consumer was created successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 006 - Positive - Should be created successfully from AutoFac " +
            "IoC")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        public virtual void ConsumingServices_006_Positive_ShouldBeCreatedSuccessfullyFromAutoFacIoC()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ConsumingServices - 006 - Positive - Should be created successfully from AutoFac " +
                    "IoC", new string[] {
                        "UnitTest"});
#line 29
this.ScenarioSetup(scenarioInfo);
#line 30
testRunner.Given("a configured Autofac IoC container", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 31
testRunner.When("the service consumer is created with the Autofac IoC container", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 32
testRunner.Then("the service consumer was created successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 007 - Positive - Should be created successfully from Simple I" +
            "njector IoC")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        public virtual void ConsumingServices_007_Positive_ShouldBeCreatedSuccessfullyFromSimpleInjectorIoC()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ConsumingServices - 007 - Positive - Should be created successfully from Simple I" +
                    "njector IoC", new string[] {
                        "UnitTest"});
#line 35
this.ScenarioSetup(scenarioInfo);
#line 36
testRunner.Given("a configured Simple Injector IoC container", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 37
testRunner.When("the service consumer is created with the Simple Injector IoC container", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 38
testRunner.Then("the service consumer was created successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 010a - Positive - Should successfully invoke a synchronous on" +
            "e-way service operation on a service channel proxy via the operations property")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        public virtual void ConsumingServices_010A_Positive_ShouldSuccessfullyInvokeASynchronousOne_WayServiceOperationOnAServiceChannelProxyViaTheOperationsProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ConsumingServices - 010a - Positive - Should successfully invoke a synchronous on" +
                    "e-way service operation on a service channel proxy via the operations property", new string[] {
                        "UnitTest"});
#line 44
this.ScenarioSetup(scenarioInfo);
#line 45
testRunner.Given("a one-way service operation will be invoked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 46
testRunner.When("the service consumer is created with the factory method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 47
testRunner.And("a synchronous one-way operation is invoked via the operations property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 48
testRunner.Then("the one-way operation was invoked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 010b - Positive - Should successfully invoke an asynchronous " +
            "one-way task service operation on a service channel proxy via the operations pro" +
            "perty")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        public virtual void ConsumingServices_010B_Positive_ShouldSuccessfullyInvokeAnAsynchronousOne_WayTaskServiceOperationOnAServiceChannelProxyViaTheOperationsProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ConsumingServices - 010b - Positive - Should successfully invoke an asynchronous " +
                    "one-way task service operation on a service channel proxy via the operations pro" +
                    "perty", new string[] {
                        "UnitTest"});
#line 51
this.ScenarioSetup(scenarioInfo);
#line 52
testRunner.Given("a one-way service operation will be invoked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 53
testRunner.When("the service consumer is created with the factory method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 54
testRunner.And("an asynchronous one-way task operation is invoked via the operations property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 55
testRunner.Then("the one-way operation was invoked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 010c - Positive - Should successfully invoke a synchronous tw" +
            "o-way service operation on a service channel proxy via the operations property")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        public virtual void ConsumingServices_010C_Positive_ShouldSuccessfullyInvokeASynchronousTwo_WayServiceOperationOnAServiceChannelProxyViaTheOperationsProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ConsumingServices - 010c - Positive - Should successfully invoke a synchronous tw" +
                    "o-way service operation on a service channel proxy via the operations property", new string[] {
                        "UnitTest"});
#line 58
this.ScenarioSetup(scenarioInfo);
#line 59
testRunner.Given("a factory method to create a new service channel", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 60
testRunner.When("the service consumer is created with the factory method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 61
testRunner.And("a synchronous two-way operation is invoked via the operations property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 62
testRunner.Then("the two-way operation was invoked successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 010d - Positive - Should successfully invoke an asynchronous " +
            "two-way task service operation on a service channel proxy via the operations pro" +
            "perty")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        public virtual void ConsumingServices_010D_Positive_ShouldSuccessfullyInvokeAnAsynchronousTwo_WayTaskServiceOperationOnAServiceChannelProxyViaTheOperationsProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ConsumingServices - 010d - Positive - Should successfully invoke an asynchronous " +
                    "two-way task service operation on a service channel proxy via the operations pro" +
                    "perty", new string[] {
                        "UnitTest"});
#line 65
this.ScenarioSetup(scenarioInfo);
#line 66
testRunner.Given("a factory method to create a new service channel", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 67
testRunner.When("the service consumer is created with the factory method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 68
testRunner.And("an asynchronous two-way task operation is invoked via the operations property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 69
testRunner.Then("the two-way operation was invoked successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 011a - Positive - Should successfully synchronously invoke a " +
            "synchronous one-way service operation on a service channel proxy via the Consume" +
            " method")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        public virtual void ConsumingServices_011A_Positive_ShouldSuccessfullySynchronouslyInvokeASynchronousOne_WayServiceOperationOnAServiceChannelProxyViaTheConsumeMethod()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ConsumingServices - 011a - Positive - Should successfully synchronously invoke a " +
                    "synchronous one-way service operation on a service channel proxy via the Consume" +
                    " method", new string[] {
                        "UnitTest"});
#line 74
this.ScenarioSetup(scenarioInfo);
#line 75
testRunner.Given("a one-way service operation will be invoked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 76
testRunner.When("the service consumer is created with the factory method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 77
testRunner.And("a synchronous one-way operation is invoked via the Consume method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 78
testRunner.Then("the one-way operation was invoked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 011b - Positive - Should successfully synchronously invoke an" +
            " asynchronous one-way task service operation on a service channel proxy via the " +
            "Consume method")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        public virtual void ConsumingServices_011B_Positive_ShouldSuccessfullySynchronouslyInvokeAnAsynchronousOne_WayTaskServiceOperationOnAServiceChannelProxyViaTheConsumeMethod()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ConsumingServices - 011b - Positive - Should successfully synchronously invoke an" +
                    " asynchronous one-way task service operation on a service channel proxy via the " +
                    "Consume method", new string[] {
                        "UnitTest"});
#line 81
this.ScenarioSetup(scenarioInfo);
#line 82
testRunner.Given("a one-way service operation will be invoked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 83
testRunner.When("the service consumer is created with the factory method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 84
testRunner.And("an asynchronous one-way task operation is invoked synchronously via the Consume m" +
                    "ethod", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 85
testRunner.Then("the one-way operation was invoked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 011c - Positive - Should successfully synchronously invoke a " +
            "synchronous two-way service operation on a service channel proxy via the Consume" +
            " method")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        public virtual void ConsumingServices_011C_Positive_ShouldSuccessfullySynchronouslyInvokeASynchronousTwo_WayServiceOperationOnAServiceChannelProxyViaTheConsumeMethod()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ConsumingServices - 011c - Positive - Should successfully synchronously invoke a " +
                    "synchronous two-way service operation on a service channel proxy via the Consume" +
                    " method", new string[] {
                        "UnitTest"});
#line 88
this.ScenarioSetup(scenarioInfo);
#line 89
testRunner.Given("a factory method to create a new service channel", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 90
testRunner.When("the service consumer is created with the factory method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 91
testRunner.And("a synchronous two-way operation is invoked via the Consume method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 92
testRunner.Then("the two-way operation was invoked successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 011d - Positive - Should successfully synchronously invoke an" +
            " asynchronous two-way task service operation on a service channel proxy via the " +
            "Consume method")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        public virtual void ConsumingServices_011D_Positive_ShouldSuccessfullySynchronouslyInvokeAnAsynchronousTwo_WayTaskServiceOperationOnAServiceChannelProxyViaTheConsumeMethod()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ConsumingServices - 011d - Positive - Should successfully synchronously invoke an" +
                    " asynchronous two-way task service operation on a service channel proxy via the " +
                    "Consume method", new string[] {
                        "UnitTest"});
#line 95
this.ScenarioSetup(scenarioInfo);
#line 96
testRunner.Given("a factory method to create a new service channel", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 97
testRunner.When("the service consumer is created with the factory method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 98
testRunner.And("an asynchronous two-way task operation is invoked synchronously via the Consume m" +
                    "ethod", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 99
testRunner.Then("the two-way operation was invoked successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 011e - Positive - Should have FaultException and not an Aggre" +
            "gateException when an exception occurs synchronously invoking an asynchronous on" +
            "e-way task service operation on a service channel proxy via the Consume method")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        public virtual void ConsumingServices_011E_Positive_ShouldHaveFaultExceptionAndNotAnAggregateExceptionWhenAnExceptionOccursSynchronouslyInvokingAnAsynchronousOne_WayTaskServiceOperationOnAServiceChannelProxyViaTheConsumeMethod()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ConsumingServices - 011e - Positive - Should have FaultException and not an Aggre" +
                    "gateException when an exception occurs synchronously invoking an asynchronous on" +
                    "e-way task service operation on a service channel proxy via the Consume method", new string[] {
                        "UnitTest"});
#line 102
this.ScenarioSetup(scenarioInfo);
#line 103
testRunner.Given("an asynchronous one-way task service operation will be invoked and throw a \'fault" +
                    "\' exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 104
testRunner.When("the service consumer is created with the factory method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 105
testRunner.And("an asynchronous one-way task operation is invoked synchronously via the Consume m" +
                    "ethod", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 106
testRunner.Then("the operation result contains a \'fault\' exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 011f - Positive - Should have FaultException and not an Aggre" +
            "gateException when an exception occurs synchronously invoking an asynchronous tw" +
            "o-way task service operation on a service channel proxy via the Consume method")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        public virtual void ConsumingServices_011F_Positive_ShouldHaveFaultExceptionAndNotAnAggregateExceptionWhenAnExceptionOccursSynchronouslyInvokingAnAsynchronousTwo_WayTaskServiceOperationOnAServiceChannelProxyViaTheConsumeMethod()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ConsumingServices - 011f - Positive - Should have FaultException and not an Aggre" +
                    "gateException when an exception occurs synchronously invoking an asynchronous tw" +
                    "o-way task service operation on a service channel proxy via the Consume method", new string[] {
                        "UnitTest"});
#line 109
this.ScenarioSetup(scenarioInfo);
#line 110
testRunner.Given("a service consumer is created with an asynchronous two-way task operation that th" +
                    "rows a \'fault\' exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 111
testRunner.When("an asynchronous two-way task operation is invoked synchronously via the Consume m" +
                    "ethod", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 112
testRunner.Then("the operation result contains a \'fault\' exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 012a - Positive - Should successfully asynchronously invoke a" +
            "n asynchronous one-way task service operation on a service channel proxy via the" +
            " ConsumeAsync method")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        public virtual void ConsumingServices_012A_Positive_ShouldSuccessfullyAsynchronouslyInvokeAnAsynchronousOne_WayTaskServiceOperationOnAServiceChannelProxyViaTheConsumeAsyncMethod()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ConsumingServices - 012a - Positive - Should successfully asynchronously invoke a" +
                    "n asynchronous one-way task service operation on a service channel proxy via the" +
                    " ConsumeAsync method", new string[] {
                        "UnitTest"});
#line 118
this.ScenarioSetup(scenarioInfo);
#line 119
testRunner.Given("a one-way service operation will be invoked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 120
testRunner.When("the service consumer is created with the factory method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 121
testRunner.And("an asynchronous one-way task operation is invoked via the ConsumeAsync method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 122
testRunner.Then("the one-way operation was invoked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 012b - Positive - Should successfully asynchronously invoke a" +
            "n asynchronous two-way task service operation on a service channel proxy via the" +
            " ConsumeAsync method")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        public virtual void ConsumingServices_012B_Positive_ShouldSuccessfullyAsynchronouslyInvokeAnAsynchronousTwo_WayTaskServiceOperationOnAServiceChannelProxyViaTheConsumeAsyncMethod()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ConsumingServices - 012b - Positive - Should successfully asynchronously invoke a" +
                    "n asynchronous two-way task service operation on a service channel proxy via the" +
                    " ConsumeAsync method", new string[] {
                        "UnitTest"});
#line 125
this.ScenarioSetup(scenarioInfo);
#line 126
testRunner.Given("a factory method to create a new service channel", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 127
testRunner.When("the service consumer is created with the factory method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 128
testRunner.And("an asynchronous two-way task operation is invoked via the ConsumeAsync method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 129
testRunner.Then("the two-way operation was invoked successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 012c - Positive - Should have FaultException and not an Aggre" +
            "gateException when an exception occurs asynchronously invoking an asynchronous o" +
            "ne-way task service operation on a service channel proxy via the ConsumeAsync me" +
            "thod")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        public virtual void ConsumingServices_012C_Positive_ShouldHaveFaultExceptionAndNotAnAggregateExceptionWhenAnExceptionOccursAsynchronouslyInvokingAnAsynchronousOne_WayTaskServiceOperationOnAServiceChannelProxyViaTheConsumeAsyncMethod()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ConsumingServices - 012c - Positive - Should have FaultException and not an Aggre" +
                    "gateException when an exception occurs asynchronously invoking an asynchronous o" +
                    "ne-way task service operation on a service channel proxy via the ConsumeAsync me" +
                    "thod", new string[] {
                        "UnitTest"});
#line 132
this.ScenarioSetup(scenarioInfo);
#line 133
testRunner.Given("an asynchronous one-way task service operation will be invoked and throw a \'fault" +
                    "\' exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 134
testRunner.When("the service consumer is created with the factory method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 135
testRunner.And("an asynchronous one-way task operation is invoked via the ConsumeAsync method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 136
testRunner.Then("the operation result contains a \'fault\' exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 012d - Positive - Should have FaultException and not an Aggre" +
            "gateException when an exception occurs asynchronously invoking an asynchronous t" +
            "wo-way task service operation on a service channel proxy via the ConsumeAsync me" +
            "thod")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        public virtual void ConsumingServices_012D_Positive_ShouldHaveFaultExceptionAndNotAnAggregateExceptionWhenAnExceptionOccursAsynchronouslyInvokingAnAsynchronousTwo_WayTaskServiceOperationOnAServiceChannelProxyViaTheConsumeAsyncMethod()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ConsumingServices - 012d - Positive - Should have FaultException and not an Aggre" +
                    "gateException when an exception occurs asynchronously invoking an asynchronous t" +
                    "wo-way task service operation on a service channel proxy via the ConsumeAsync me" +
                    "thod", new string[] {
                        "UnitTest"});
#line 139
this.ScenarioSetup(scenarioInfo);
#line 140
testRunner.Given("a service consumer is created with an asynchronous two-way task operation that th" +
                    "rows a \'fault\' exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 141
testRunner.When("an asynchronous two-way task operation is invoked via the ConsumeAsync method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 142
testRunner.Then("the operation result contains a \'fault\' exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 015 - Positive - Should by default keep the service channel o" +
            "pen and reusable when a FaultException occurs while invoking a service operation" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        public virtual void ConsumingServices_015_Positive_ShouldByDefaultKeepTheServiceChannelOpenAndReusableWhenAFaultExceptionOccursWhileInvokingAServiceOperation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ConsumingServices - 015 - Positive - Should by default keep the service channel o" +
                    "pen and reusable when a FaultException occurs while invoking a service operation" +
                    "", new string[] {
                        "UnitTest"});
#line 145
this.ScenarioSetup(scenarioInfo);
#line 146
testRunner.Given("a service consumer is created with an operation that throws a \'fault\' exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 147
testRunner.When("the operation is called via the Consume method and a \'fault\' exception occurs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 148
testRunner.Then("the service channel was not closed or aborted, and remains open and usable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 016 - Positive - Should use the default retry policy specifie" +
            "d on the service consumer to perform retries with the Consume method")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        public virtual void ConsumingServices_016_Positive_ShouldUseTheDefaultRetryPolicySpecifiedOnTheServiceConsumerToPerformRetriesWithTheConsumeMethod()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ConsumingServices - 016 - Positive - Should use the default retry policy specifie" +
                    "d on the service consumer to perform retries with the Consume method", new string[] {
                        "UnitTest"});
#line 153
this.ScenarioSetup(scenarioInfo);
#line 154
testRunner.Given("a service consumer is created with an operation that throws a \'communication\' exc" +
                    "eption", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 155
testRunner.And("the service consumer has a default retry policy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 156
testRunner.When("the operation is called via the Consume method and a \'communication\' exception oc" +
                    "curs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 157
testRunner.Then("the operation was invoked multiple times due to the retry policy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 158
testRunner.Then("the exception behaviour was invoked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 017 - Positive - Should use the default retry policy specifie" +
            "d on the service consumer to perform retries with the Operations property")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        public virtual void ConsumingServices_017_Positive_ShouldUseTheDefaultRetryPolicySpecifiedOnTheServiceConsumerToPerformRetriesWithTheOperationsProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ConsumingServices - 017 - Positive - Should use the default retry policy specifie" +
                    "d on the service consumer to perform retries with the Operations property", new string[] {
                        "UnitTest"});
#line 161
this.ScenarioSetup(scenarioInfo);
#line 162
testRunner.Given("a service consumer is created with an operation that throws a \'communication\' exc" +
                    "eption", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 163
testRunner.And("the service consumer has a default retry policy with a retry policy attempt excep" +
                    "tion behaviour", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 164
testRunner.When("the operation is called via the Operations property and a \'communication\' excepti" +
                    "on occurs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 165
testRunner.Then("the operation was invoked multiple times due to the retry policy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 166
testRunner.Then("the exception behaviour was invoked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 018 - Positive - Should use the default retry policy specifie" +
            "d on the service consumer to perform retries with the ConsumeAsync method")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        public virtual void ConsumingServices_018_Positive_ShouldUseTheDefaultRetryPolicySpecifiedOnTheServiceConsumerToPerformRetriesWithTheConsumeAsyncMethod()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ConsumingServices - 018 - Positive - Should use the default retry policy specifie" +
                    "d on the service consumer to perform retries with the ConsumeAsync method", new string[] {
                        "UnitTest"});
#line 172
this.ScenarioSetup(scenarioInfo);
#line 173
testRunner.Given("a service consumer is created with an asynchronous two-way task operation that th" +
                    "rows a \'communication\' exception in a retry scenario", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 174
testRunner.And("the service consumer has a default retry policy with a retry policy attempt excep" +
                    "tion behaviour", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 175
testRunner.When("the operation that throws some exceptions to retry is called via the ConsumeAsync" +
                    " method and a \'communication\' exception occurs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 176
testRunner.Then("the operation was invoked multiple times due to the retry policy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 177
testRunner.Then("the exception behaviour was invoked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 019 - Positive - Should use the default retry policy specifie" +
            "d on the service consumer to perform retries with the Operations property - with" +
            " an async operation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        public virtual void ConsumingServices_019_Positive_ShouldUseTheDefaultRetryPolicySpecifiedOnTheServiceConsumerToPerformRetriesWithTheOperationsProperty_WithAnAsyncOperation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ConsumingServices - 019 - Positive - Should use the default retry policy specifie" +
                    "d on the service consumer to perform retries with the Operations property - with" +
                    " an async operation", new string[] {
                        "UnitTest"});
#line 180
this.ScenarioSetup(scenarioInfo);
#line 181
testRunner.Given("a service consumer is created with an asynchronous two-way task operation that th" +
                    "rows a \'communication\' exception in a retry scenario", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 182
testRunner.And("the service consumer has a default retry policy with a retry policy attempt excep" +
                    "tion behaviour", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 183
testRunner.When("the asynchronous operation that throws some exceptions to retry is called via the" +
                    " Operations property and a \'communication\' exception occurs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 184
testRunner.Then("the operation was invoked multiple times due to the retry policy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 185
testRunner.Then("the exception behaviour was invoked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 020 - Negative - Should by default close the service channel " +
            "when a CommunicationException occurs while invoking a service operation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        public virtual void ConsumingServices_020_Negative_ShouldByDefaultCloseTheServiceChannelWhenACommunicationExceptionOccursWhileInvokingAServiceOperation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ConsumingServices - 020 - Negative - Should by default close the service channel " +
                    "when a CommunicationException occurs while invoking a service operation", new string[] {
                        "UnitTest"});
#line 192
this.ScenarioSetup(scenarioInfo);
#line 193
testRunner.Given("a service consumer is created with an operation that throws a \'communication\' exc" +
                    "eption", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 194
testRunner.When("the operation is called via the Consume method and a \'communication\' exception oc" +
                    "curs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 195
testRunner.Then("the service channel was closed and disposed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 021 - Negative - Should by default close the service channel " +
            "when a TimeoutException occurs while invoking a service operation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        public virtual void ConsumingServices_021_Negative_ShouldByDefaultCloseTheServiceChannelWhenATimeoutExceptionOccursWhileInvokingAServiceOperation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ConsumingServices - 021 - Negative - Should by default close the service channel " +
                    "when a TimeoutException occurs while invoking a service operation", new string[] {
                        "UnitTest"});
#line 198
this.ScenarioSetup(scenarioInfo);
#line 199
testRunner.Given("a service consumer is created with an operation that throws a \'timeout\' exception" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 200
testRunner.When("the operation is called via the Consume method and a \'timeout\' exception occurs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 201
testRunner.Then("the service channel was closed and disposed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 022 - Negative - Should by default close the service channel " +
            "when an unexpected Exception occurs while invoking a service operation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        public virtual void ConsumingServices_022_Negative_ShouldByDefaultCloseTheServiceChannelWhenAnUnexpectedExceptionOccursWhileInvokingAServiceOperation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ConsumingServices - 022 - Negative - Should by default close the service channel " +
                    "when an unexpected Exception occurs while invoking a service operation", new string[] {
                        "UnitTest"});
#line 204
this.ScenarioSetup(scenarioInfo);
#line 205
testRunner.Given("a service consumer is created with an operation that throws a \'unexpected\' except" +
                    "ion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 206
testRunner.When("the operation is called via the Consume method and a \'unexpected\' exception occur" +
                    "s", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 207
testRunner.Then("the service channel was closed and disposed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 023 - Negative - Should by default close the service channel " +
            "when a ThreadAbortedException occurs while invoking a service operation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        public virtual void ConsumingServices_023_Negative_ShouldByDefaultCloseTheServiceChannelWhenAThreadAbortedExceptionOccursWhileInvokingAServiceOperation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ConsumingServices - 023 - Negative - Should by default close the service channel " +
                    "when a ThreadAbortedException occurs while invoking a service operation", ((string[])(null)));
#line 209
this.ScenarioSetup(scenarioInfo);
#line 210
testRunner.Given("a service consumer is created with an operation aborts the thread", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 211
testRunner.When("the operation is invoked and the thread is aborted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 212
testRunner.Then("the service channel was closed and disposed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 024 - Positive - Should have a customisable trigger strategy " +
            "for when to close the service channel when any exception occurs while invoking a" +
            " service operation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        public virtual void ConsumingServices_024_Positive_ShouldHaveACustomisableTriggerStrategyForWhenToCloseTheServiceChannelWhenAnyExceptionOccursWhileInvokingAServiceOperation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ConsumingServices - 024 - Positive - Should have a customisable trigger strategy " +
                    "for when to close the service channel when any exception occurs while invoking a" +
                    " service operation", ((string[])(null)));
#line 214
this.ScenarioSetup(scenarioInfo);
#line 215
testRunner.Given("a service consumer is created with an operation that throws a \'communication\' exc" +
                    "eption", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 216
testRunner.And("the service consumer has a custom service channel close trigger strategy that doe" +
                    "s not ever trigger the closing of the service channel", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 217
testRunner.When("the operation is called via the Consume method and a \'communication\' exception oc" +
                    "curs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 218
testRunner.Then("the service channel was not closed or aborted, and remains open and usable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 030 - Negative - Should abort the service channel whenever it" +
            " faults")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        public virtual void ConsumingServices_030_Negative_ShouldAbortTheServiceChannelWheneverItFaults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ConsumingServices - 030 - Negative - Should abort the service channel whenever it" +
                    " faults", new string[] {
                        "UnitTest"});
#line 225
this.ScenarioSetup(scenarioInfo);
#line 226
testRunner.Given("a service consumer with a channel that will fault", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 227
testRunner.When("the service channel faults", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 228
testRunner.Then("the service channel was aborted and disposed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 031 - Negative - Should abort the service channel when there " +
            "is an exception closing the service channel")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        public virtual void ConsumingServices_031_Negative_ShouldAbortTheServiceChannelWhenThereIsAnExceptionClosingTheServiceChannel()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ConsumingServices - 031 - Negative - Should abort the service channel when there " +
                    "is an exception closing the service channel", new string[] {
                        "UnitTest"});
#line 231
this.ScenarioSetup(scenarioInfo);
#line 232
testRunner.Given("a service consumer that will throw an \'unexpected\' exception when the service cha" +
                    "nnel is closing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 233
testRunner.When("there is an attempt to close the service channel", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 234
testRunner.Then("the service channel started closing, then aborted and disposed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 032 - Negative - Should abort the service channel when a Thre" +
            "adAbortedException occurs while closing the service channel")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        public virtual void ConsumingServices_032_Negative_ShouldAbortTheServiceChannelWhenAThreadAbortedExceptionOccursWhileClosingTheServiceChannel()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ConsumingServices - 032 - Negative - Should abort the service channel when a Thre" +
                    "adAbortedException occurs while closing the service channel", ((string[])(null)));
#line 236
this.ScenarioSetup(scenarioInfo);
#line 237
testRunner.Given("a service consumer that will abort the thread when the service channel is closing" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 238
testRunner.When("the service channel is closed and the thread is aborted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 239
testRunner.Then("the service channel started closing, then aborted and disposed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 040 - Positive - Should close the service channel when the sc" +
            "ope of a Using block for a service consumer finishes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        public virtual void ConsumingServices_040_Positive_ShouldCloseTheServiceChannelWhenTheScopeOfAUsingBlockForAServiceConsumerFinishes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ConsumingServices - 040 - Positive - Should close the service channel when the sc" +
                    "ope of a Using block for a service consumer finishes", new string[] {
                        "UnitTest"});
#line 245
this.ScenarioSetup(scenarioInfo);
#line 246
testRunner.Given("a service consumer is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 247
testRunner.When("a service consumer is disposed at the end of a using block", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 248
testRunner.Then("the service channel was closed and disposed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 041 - Positive - Should close the service channel when the Ga" +
            "rbage Collector finalises the service consumer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        public virtual void ConsumingServices_041_Positive_ShouldCloseTheServiceChannelWhenTheGarbageCollectorFinalisesTheServiceConsumer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ConsumingServices - 041 - Positive - Should close the service channel when the Ga" +
                    "rbage Collector finalises the service consumer", new string[] {
                        "UnitTest"});
#line 251
this.ScenarioSetup(scenarioInfo);
#line 252
testRunner.Given("a service consumer is created for testing garbage collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 253
testRunner.When("a service consumer is finalised by the garbage collector", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 254
testRunner.Then("the service channel was closed and disposed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void ConsumingServices_051_Negative_ShouldPerformTheCorrespondingExceptionBehaviourActionWhenThereIsAXyzException_WhileInvokingAServiceOperation(string typeOfException, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "UnitTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ConsumingServices - 051 - Negative - Should perform the corresponding exception b" +
                    "ehaviour action when there is a <Xyz> Exception - while invoking a service opera" +
                    "tion", @__tags);
#line 260
this.ScenarioSetup(scenarioInfo);
#line 261
testRunner.Given(string.Format("a service consumer is created with an operation that throws a \'{0}\' exception and" +
                        " has a corresponding exception behaviour strategy", typeOfException), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 262
testRunner.When(string.Format("the operation is called and a \'{0}\' exception occurs", typeOfException), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 263
testRunner.Then("the exception behaviour was invoked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 051 - Negative - Should perform the corresponding exception b" +
            "ehaviour action when there is a <Xyz> Exception - while invoking a service opera" +
            "tion: fault")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "fault")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type of Exception", "fault")]
        public virtual void ConsumingServices_051_Negative_ShouldPerformTheCorrespondingExceptionBehaviourActionWhenThereIsAXyzException_WhileInvokingAServiceOperation_Fault()
        {
            this.ConsumingServices_051_Negative_ShouldPerformTheCorrespondingExceptionBehaviourActionWhenThereIsAXyzException_WhileInvokingAServiceOperation("fault", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 051 - Negative - Should perform the corresponding exception b" +
            "ehaviour action when there is a <Xyz> Exception - while invoking a service opera" +
            "tion: communication")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "communication")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type of Exception", "communication")]
        public virtual void ConsumingServices_051_Negative_ShouldPerformTheCorrespondingExceptionBehaviourActionWhenThereIsAXyzException_WhileInvokingAServiceOperation_Communication()
        {
            this.ConsumingServices_051_Negative_ShouldPerformTheCorrespondingExceptionBehaviourActionWhenThereIsAXyzException_WhileInvokingAServiceOperation("communication", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 051 - Negative - Should perform the corresponding exception b" +
            "ehaviour action when there is a <Xyz> Exception - while invoking a service opera" +
            "tion: timeout")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "timeout")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type of Exception", "timeout")]
        public virtual void ConsumingServices_051_Negative_ShouldPerformTheCorrespondingExceptionBehaviourActionWhenThereIsAXyzException_WhileInvokingAServiceOperation_Timeout()
        {
            this.ConsumingServices_051_Negative_ShouldPerformTheCorrespondingExceptionBehaviourActionWhenThereIsAXyzException_WhileInvokingAServiceOperation("timeout", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 051 - Negative - Should perform the corresponding exception b" +
            "ehaviour action when there is a <Xyz> Exception - while invoking a service opera" +
            "tion: unexpected")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "unexpected")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type of Exception", "unexpected")]
        public virtual void ConsumingServices_051_Negative_ShouldPerformTheCorrespondingExceptionBehaviourActionWhenThereIsAXyzException_WhileInvokingAServiceOperation_Unexpected()
        {
            this.ConsumingServices_051_Negative_ShouldPerformTheCorrespondingExceptionBehaviourActionWhenThereIsAXyzException_WhileInvokingAServiceOperation("unexpected", ((string[])(null)));
#line hidden
        }
        
        public virtual void ConsumingServices_052_Negative_ShouldPerformTheCorrespondingExceptionBehaviourActionWhenThereIsAXyzException_WhileClosingAServiceChannel(string typeOfException, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "UnitTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ConsumingServices - 052 - Negative - Should perform the corresponding exception b" +
                    "ehaviour action when there is a <Xyz> Exception - while closing a service channe" +
                    "l", @__tags);
#line 272
this.ScenarioSetup(scenarioInfo);
#line 273
testRunner.Given(string.Format("a service consumer that will throw an \'{0}\' exception when the service channel is" +
                        " closing and have a corresponding exception behaviour strategy", typeOfException), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 274
testRunner.When("there is an attempt to close the service channel", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 275
testRunner.Then("the exception behaviour was invoked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 052 - Negative - Should perform the corresponding exception b" +
            "ehaviour action when there is a <Xyz> Exception - while closing a service channe" +
            "l: communication")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "communication")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type of Exception", "communication")]
        public virtual void ConsumingServices_052_Negative_ShouldPerformTheCorrespondingExceptionBehaviourActionWhenThereIsAXyzException_WhileClosingAServiceChannel_Communication()
        {
            this.ConsumingServices_052_Negative_ShouldPerformTheCorrespondingExceptionBehaviourActionWhenThereIsAXyzException_WhileClosingAServiceChannel("communication", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 052 - Negative - Should perform the corresponding exception b" +
            "ehaviour action when there is a <Xyz> Exception - while closing a service channe" +
            "l: timeout")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "timeout")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type of Exception", "timeout")]
        public virtual void ConsumingServices_052_Negative_ShouldPerformTheCorrespondingExceptionBehaviourActionWhenThereIsAXyzException_WhileClosingAServiceChannel_Timeout()
        {
            this.ConsumingServices_052_Negative_ShouldPerformTheCorrespondingExceptionBehaviourActionWhenThereIsAXyzException_WhileClosingAServiceChannel("timeout", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 052 - Negative - Should perform the corresponding exception b" +
            "ehaviour action when there is a <Xyz> Exception - while closing a service channe" +
            "l: unexpected")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "unexpected")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type of Exception", "unexpected")]
        public virtual void ConsumingServices_052_Negative_ShouldPerformTheCorrespondingExceptionBehaviourActionWhenThereIsAXyzException_WhileClosingAServiceChannel_Unexpected()
        {
            this.ConsumingServices_052_Negative_ShouldPerformTheCorrespondingExceptionBehaviourActionWhenThereIsAXyzException_WhileClosingAServiceChannel("unexpected", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 053 - Negative - Should perform the corresponding exception b" +
            "ehaviour action when there is an exception while aborting a service channel")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        public virtual void ConsumingServices_053_Negative_ShouldPerformTheCorrespondingExceptionBehaviourActionWhenThereIsAnExceptionWhileAbortingAServiceChannel()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ConsumingServices - 053 - Negative - Should perform the corresponding exception b" +
                    "ehaviour action when there is an exception while aborting a service channel", new string[] {
                        "UnitTest"});
#line 283
this.ScenarioSetup(scenarioInfo);
#line 284
testRunner.Given("a service consumer that will throw an exception while aborting, and has a corresp" +
                    "onding exception behaviour", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 285
testRunner.When("the service channel faults", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 286
testRunner.Then("the exception behaviour was invoked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 054 - Negative - Should perform the corresponding exception b" +
            "ehaviour action when there is an exception while the Garbage Collector is finali" +
            "sing the service consumer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        public virtual void ConsumingServices_054_Negative_ShouldPerformTheCorrespondingExceptionBehaviourActionWhenThereIsAnExceptionWhileTheGarbageCollectorIsFinalisingTheServiceConsumer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ConsumingServices - 054 - Negative - Should perform the corresponding exception b" +
                    "ehaviour action when there is an exception while the Garbage Collector is finali" +
                    "sing the service consumer", new string[] {
                        "UnitTest"});
#line 289
this.ScenarioSetup(scenarioInfo);
#line 290
testRunner.Given("a service consumer is created for testing garbage collection, and has a destructo" +
                    "r exception behaviour", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 291
testRunner.When("a service consumer is finalised by the garbage collector and an exception occurs " +
                    "in the destructor of the service channel", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 292
testRunner.Then("the exception behaviour was invoked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void ConsumingServices_060_Negative_ShouldBubbleAnXyzExceptionBackToTheCallerWhenThereIsAnExceptionWhileInvokingAServiceOperation(string typeOfException, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "UnitTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ConsumingServices - 060 - Negative - Should bubble an <Xyz> exception back to the" +
                    " caller when there is an exception while invoking a service operation", @__tags);
#line 298
this.ScenarioSetup(scenarioInfo);
#line 299
testRunner.Given(string.Format("a service consumer is created with an operation that throws a \'{0}\' exception", typeOfException), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 300
testRunner.When("the operation is invoked and the exception occurs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 301
testRunner.Then(string.Format("a \'{0}\' exception bubbled up to the calling code", typeOfException), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 060 - Negative - Should bubble an <Xyz> exception back to the" +
            " caller when there is an exception while invoking a service operation: fault")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "fault")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type of Exception", "fault")]
        public virtual void ConsumingServices_060_Negative_ShouldBubbleAnXyzExceptionBackToTheCallerWhenThereIsAnExceptionWhileInvokingAServiceOperation_Fault()
        {
            this.ConsumingServices_060_Negative_ShouldBubbleAnXyzExceptionBackToTheCallerWhenThereIsAnExceptionWhileInvokingAServiceOperation("fault", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 060 - Negative - Should bubble an <Xyz> exception back to the" +
            " caller when there is an exception while invoking a service operation: communica" +
            "tion")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "communication")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type of Exception", "communication")]
        public virtual void ConsumingServices_060_Negative_ShouldBubbleAnXyzExceptionBackToTheCallerWhenThereIsAnExceptionWhileInvokingAServiceOperation_Communication()
        {
            this.ConsumingServices_060_Negative_ShouldBubbleAnXyzExceptionBackToTheCallerWhenThereIsAnExceptionWhileInvokingAServiceOperation("communication", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 060 - Negative - Should bubble an <Xyz> exception back to the" +
            " caller when there is an exception while invoking a service operation: timeout")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "timeout")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type of Exception", "timeout")]
        public virtual void ConsumingServices_060_Negative_ShouldBubbleAnXyzExceptionBackToTheCallerWhenThereIsAnExceptionWhileInvokingAServiceOperation_Timeout()
        {
            this.ConsumingServices_060_Negative_ShouldBubbleAnXyzExceptionBackToTheCallerWhenThereIsAnExceptionWhileInvokingAServiceOperation("timeout", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 060 - Negative - Should bubble an <Xyz> exception back to the" +
            " caller when there is an exception while invoking a service operation: unexpecte" +
            "d")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "unexpected")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type of Exception", "unexpected")]
        public virtual void ConsumingServices_060_Negative_ShouldBubbleAnXyzExceptionBackToTheCallerWhenThereIsAnExceptionWhileInvokingAServiceOperation_Unexpected()
        {
            this.ConsumingServices_060_Negative_ShouldBubbleAnXyzExceptionBackToTheCallerWhenThereIsAnExceptionWhileInvokingAServiceOperation("unexpected", ((string[])(null)));
#line hidden
        }
        
        public virtual void ConsumingServices_061_Negative_ShouldNotBubbleAnExceptionBackToTheCallerWhenThereIsAXyzExceptionWhileClosingAServiceChannel(string typeOfException, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "UnitTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ConsumingServices - 061 -  Negative - Should not bubble an exception back to the " +
                    "caller when there is a <Xyz> exception while closing a service channel", @__tags);
#line 310
this.ScenarioSetup(scenarioInfo);
#line 311
testRunner.Given(string.Format("a service consumer that will throw an \'{0}\' exception when the service channel is" +
                        " closing", typeOfException), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 312
testRunner.When("there is an attempt to close the service channel", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 313
testRunner.Then("the exception is not bubbled up to the calling code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 061 -  Negative - Should not bubble an exception back to the " +
            "caller when there is a <Xyz> exception while closing a service channel: communic" +
            "ation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "communication")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type of Exception", "communication")]
        public virtual void ConsumingServices_061_Negative_ShouldNotBubbleAnExceptionBackToTheCallerWhenThereIsAXyzExceptionWhileClosingAServiceChannel_Communication()
        {
            this.ConsumingServices_061_Negative_ShouldNotBubbleAnExceptionBackToTheCallerWhenThereIsAXyzExceptionWhileClosingAServiceChannel("communication", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 061 -  Negative - Should not bubble an exception back to the " +
            "caller when there is a <Xyz> exception while closing a service channel: timeout")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "timeout")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type of Exception", "timeout")]
        public virtual void ConsumingServices_061_Negative_ShouldNotBubbleAnExceptionBackToTheCallerWhenThereIsAXyzExceptionWhileClosingAServiceChannel_Timeout()
        {
            this.ConsumingServices_061_Negative_ShouldNotBubbleAnExceptionBackToTheCallerWhenThereIsAXyzExceptionWhileClosingAServiceChannel("timeout", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 061 -  Negative - Should not bubble an exception back to the " +
            "caller when there is a <Xyz> exception while closing a service channel: unexpect" +
            "ed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "unexpected")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Type of Exception", "unexpected")]
        public virtual void ConsumingServices_061_Negative_ShouldNotBubbleAnExceptionBackToTheCallerWhenThereIsAXyzExceptionWhileClosingAServiceChannel_Unexpected()
        {
            this.ConsumingServices_061_Negative_ShouldNotBubbleAnExceptionBackToTheCallerWhenThereIsAXyzExceptionWhileClosingAServiceChannel("unexpected", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 062 - Negative - Should not bubble an exception back to the c" +
            "aller when there is an exception while aborting a service channel")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UnitTest")]
        public virtual void ConsumingServices_062_Negative_ShouldNotBubbleAnExceptionBackToTheCallerWhenThereIsAnExceptionWhileAbortingAServiceChannel()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ConsumingServices - 062 - Negative - Should not bubble an exception back to the c" +
                    "aller when there is an exception while aborting a service channel", new string[] {
                        "UnitTest"});
#line 321
this.ScenarioSetup(scenarioInfo);
#line 322
testRunner.Given("a service consumer that will throw an exception when the service channel is abort" +
                    "ing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 323
testRunner.When("there is an attempt to close the service channel", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 324
testRunner.Then("the exception is not bubbled up to the calling code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ConsumingServices - 070 - Positive - Should not leak memory")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Consuming Services")]
        public virtual void ConsumingServices_070_Positive_ShouldNotLeakMemory()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ConsumingServices - 070 - Positive - Should not leak memory", ((string[])(null)));
#line 329
this.ScenarioSetup(scenarioInfo);
#line 330
testRunner.When("many service consumers are created and used in a tight loop and go out of scope i" +
                    "mmediately over \'15\' seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 331
testRunner.And("garbage collection is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 332
testRunner.Then("there is no significant amount of memory loss", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
